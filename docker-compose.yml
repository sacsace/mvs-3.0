services:
  # PostgreSQL 데이터베이스
  postgres:
    image: postgres:15-alpine
    container_name: mvs-3.0-postgres
    environment:
      POSTGRES_DB: ${DB_NAME:-mvs_db}
      POSTGRES_USER: ${DB_USER:-mvs_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-mvs_password}
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - mvs-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-mvs_user} -d ${DB_NAME:-mvs_db}"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis 캐시
  redis:
    image: redis:7-alpine
    container_name: mvs-3.0-redis
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - mvs-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # 백엔드 서버
  backend:
    build:
      context: ./msv-server
      dockerfile: Dockerfile
    container_name: mvs-3.0-backend
    environment:
      NODE_ENV: development
      PORT: 5000
      HTTPS: false
      CORS_ORIGIN: http://localhost:3000
      DB_HOST: mvs-3.0-postgres
      DB_PORT: 5432
      DB_NAME: mvs_db
      DB_USER: mvs_user
      DB_PASSWORD: mvs_password
      JWT_SECRET: your-super-secret-jwt-key
      REDIS_HOST: mvs-3.0-redis
      REDIS_PORT: 6379
    ports:
      - "5000:5000"
    volumes:
      - /app/node_modules
      - ./ssl:/app/ssl:ro
    networks:
      - mvs-network
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # 프론트엔드 서버
  frontend:
    build:
      context: ./msv-frontend
      dockerfile: Dockerfile
      args:
        REACT_APP_API_URL: http://localhost/api
    container_name: mvs-3.0-frontend
    environment:
      - REACT_APP_API_URL=http://localhost/api
      - REACT_APP_WS_URL=ws://localhost
    ports:
      - "3000:80"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - mvs-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Nginx 리버스 프록시 (HTTPS 활성화)
  nginx:
    image: nginx:alpine
    container_name: mvs-3.0-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - mvs-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  postgres_data:
  redis_data:

networks:
  mvs-network:
    driver: bridge